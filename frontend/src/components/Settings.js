import React, { useState, useEffect } from 'react';
import '../styles/settings.css';
import { api } from '../services/api';
import { toast } from 'react-hot-toast';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ LLM –º–æ–¥–µ–ª–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏
 */
const Settings = ({ isOpen, onClose }) => {
  const availableModels = [
    { id: 'gpt-3.5', name: 'GPT-3.5' },
    { id: 'deepseek', name: 'DeepSeek' },
    { id: 'yandexgpt', name: 'YandexGPT' },
    { id: 'gigachat', name: 'GigaChat' },
  ];

  const [selectedModel, setSelectedModel] = useState('gpt-3.5');
  const [apiKey, setApiKey] = useState('');
  const [showApiKey, setShowApiKey] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [saveError, setSaveError] = useState(null);
  const [saveSuccess, setSaveSuccess] = useState(false);

  useEffect(() => {
    const savedSettings = localStorage.getItem('llmSettings');
    if (savedSettings) {
      const settings = JSON.parse(savedSettings);
      setSelectedModel(settings.model || 'gpt-3.5');
      setApiKey(settings.apiKey || '');
    }
  }, []);

  const handleSaveSettings = async (e) => {
    e.preventDefault();
    
    setIsSaving(true);
    setSaveError(null);
    setSaveSuccess(false);
    
    try {
      if (!apiKey.trim()) {
        throw new Error('API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      const settings = {
        model: selectedModel,
        apiKey: apiKey.trim()
      };
      
      localStorage.setItem('llmSettings', JSON.stringify(settings));
      setSaveSuccess(true);
      toast.success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      
      setTimeout(() => {
        onClose();
      }, 2000);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      setSaveError(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      toast.error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    } finally {
      setIsSaving(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="settings-modal">
        <div className="settings-header">
          <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
          <button className="close-button" onClick={onClose}>√ó</button>
        </div>
        
        <div className="settings-content">
          <form onSubmit={handleSaveSettings}>
            <div className="settings-section">
              <h3>–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏</h3>
              <div className="model-selection">
                {availableModels.map((model) => (
                  <div 
                    key={model.id} 
                    className={`model-option ${selectedModel === model.id ? 'selected' : ''}`}
                    onClick={() => setSelectedModel(model.id)}
                  >
                    <div className="model-radio">
                      <div className={`radio-inner ${selectedModel === model.id ? 'active' : ''}`}></div>
                    </div>
                    <span className="model-name">{model.name}</span>
                  </div>
                ))}
              </div>
            </div>
            
            <div className="settings-section">
              <h3>API –∫–ª—é—á</h3>
              <div className="api-key-input">
                <input 
                  type={showApiKey ? "text" : "password"} 
                  value={apiKey} 
                  onChange={(e) => setApiKey(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á"
                />
                <button 
                  type="button" 
                  className="toggle-visibility" 
                  onClick={() => setShowApiKey(!showApiKey)}
                >
                  {showApiKey ? 'üôà' : 'üëÅÔ∏è'}
                </button>
              </div>
              <p className="api-key-info">
                API –∫–ª—é—á –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏. 
                –ö–ª—é—á —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.
              </p>
            </div>
            
            {saveError && (
              <div className="settings-error">
                <span className="error-icon">‚ö†Ô∏è</span>
                {saveError}
              </div>
            )}
            
            {saveSuccess && (
              <div className="settings-success">
                <span className="success-icon">‚úÖ</span>
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!
              </div>
            )}
            
            <div className="settings-actions">
              <button 
                type="submit" 
                className="save-button"
                disabled={isSaving}
              >
                {isSaving ? (
                  <>
                    <span className="loading-spinner"></span>
                    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                  </>
                ) : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Settings; 